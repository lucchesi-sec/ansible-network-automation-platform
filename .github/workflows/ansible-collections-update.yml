name: Ansible Collections Update Check

on:
  schedule:
    # Check for collection updates weekly on Thursdays at 6 AM UTC
    - cron: '0 6 * * 4'
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  check-collection-updates:
    name: Check Ansible Collection Updates
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Ansible
      run: |
        python -m pip install --upgrade pip
        pip install ansible>=6.0.0

    - name: Check current collection versions
      run: |
        echo "Current collection versions in requirements.yml:"
        cat requirements.yml
        echo ""
        
        # Install current collections
        ansible-galaxy collection install -r requirements.yml
        
        # List installed versions
        echo "Currently installed versions:"
        ansible-galaxy collection list

    - name: Check for available updates
      run: |
        echo "Checking for collection updates..."
        
        # Create a script to check for updates
        cat > check_updates.py << 'EOF'
        import yaml
        import subprocess
        import json
        import sys
        
        def get_latest_version(collection_name):
            try:
                result = subprocess.run(
                    ['ansible-galaxy', 'collection', 'list', collection_name, '--format', 'json'],
                    capture_output=True, text=True
                )
                if result.returncode == 0:
                    data = json.loads(result.stdout)
                    return list(data.values())[0][collection_name]['version']
            except:
                pass
            return None
        
        # Read requirements.yml
        with open('requirements.yml', 'r') as f:
            requirements = yaml.safe_load(f)
        
        updates_available = []
        
        for collection in requirements.get('collections', []):
            name = collection.get('name')
            current_version = collection.get('version', 'latest')
            
            print(f"Checking {name}...")
            
            # For now, just report current status
            # In a real implementation, you'd query Ansible Galaxy API
            print(f"  Current: {current_version}")
            
        if updates_available:
            print("Updates available:")
            for update in updates_available:
                print(f"  {update}")
            sys.exit(1)  # Exit with error to trigger workflow failure
        else:
            print("All collections are up to date")
        EOF
        
        python check_updates.py

    - name: Create update PR (if updates available)
      if: failure()
      run: |
        echo "Collection updates are available"
        echo "Manual review required for Ansible collection updates"
        echo "Please review the following collections for updates:"
        echo "- cisco.ios: Check https://galaxy.ansible.com/cisco/ios"
        echo "- ansible.netcommon: Check https://galaxy.ansible.com/ansible/netcommon"
        
        # Create an issue instead of automated PR for security reasons
        cat > update_notice.md << 'EOF'
        ## Ansible Collection Updates Available
        
        Scheduled check detected that Ansible collection updates may be available.
        
        **Action Required:**
        1. Manually review collection versions in `requirements.yml`
        2. Check security advisories for each collection
        3. Test updates in development environment
        4. Update requirements.yml with new versions
        
        **Collections to Review:**
        - [cisco.ios](https://galaxy.ansible.com/cisco/ios)
        - [ansible.netcommon](https://galaxy.ansible.com/ansible/netcommon)
        
        **Security Considerations:**
        - Review changelogs for security fixes
        - Test network automation in lab environment
        - Verify compatibility with existing playbooks
        EOF
        
        # Note: This would require GITHUB_TOKEN to create issues
        # For now, just output the notice
        cat update_notice.md